import { supabase } from '../lib/supabase';
import { OPENAI_API_KEY } from '@env';

// Tipos para la IA
export interface AIMessage {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
}

export interface AIConversation {
  id: string;
  userId: string;
  messages: AIMessage[];
  createdAt: Date;
  updatedAt: Date;
}

export interface AIResponse {
  success: boolean;
  message?: string;
  error?: string;
}

class AIService {
  private apiKey: string;
  private baseURL: string;
  private useFreeMode: boolean = true; // Cambiar a false para usar APIs pagadas
  private useHuggingFace: boolean = false; // Activar para usar Hugging Face gratuito

  constructor() {
    // Configuraci√≥n para OpenAI
    this.apiKey = OPENAI_API_KEY || '';
    this.baseURL = 'https://api.openai.com/v1';
    
    // Debug: Verificar configuraci√≥n
    console.log('AI Service initialized');
    console.log('Using FREE mode:', this.useFreeMode);
    console.log('Using Hugging Face:', this.useHuggingFace);
    
    if (!this.useFreeMode && !this.apiKey) {
      console.warn('OpenAI API key not configured. Switching to FREE mode.');
      this.useFreeMode = true;
    }
  }

  // M√©todo principal para enviar mensaje a la IA
  async sendMessage(
    message: string, 
    conversationId?: string, 
    petContext?: any
  ): Promise<AIResponse> {
    // Modo Hugging Face gratuito
    if (this.useHuggingFace) {
      return this.sendToHuggingFace(message, conversationId, petContext);
    }
    
    // Modo gratuito - usar respuestas inteligentes
    if (this.useFreeMode) {
      return this.getSmartFallbackResponse(message, petContext);
    }

    // Modo pagado - usar OpenAI
    return this.sendToOpenAI(message, conversationId, petContext);
  }

  // Integraci√≥n con Hugging Face (Gratuito)
  private async sendToHuggingFace(
    message: string, 
    conversationId?: string, 
    petContext?: any
  ): Promise<AIResponse> {
    try {
      // Modelo gratuito de Hugging Face para chat
      const model = "microsoft/DialoGPT-medium"; // Modelo gratuito
      
      const response = await fetch(`https://api-inference.huggingface.co/models/${model}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // Nota: Para uso gratuito, no necesitas API key, pero tienes l√≠mites
        },
        body: JSON.stringify({
          inputs: this.buildPetContextPrompt(message, petContext),
          parameters: {
            max_length: 150,
            temperature: 0.7,
            do_sample: true,
          }
        }),
      });

      if (!response.ok) {
        throw new Error(`Hugging Face API error: ${response.status}`);
      }

      const data = await response.json();
      const aiResponse = data[0]?.generated_text || 'Lo siento, no pude procesar tu mensaje.';

      // Guardar conversaci√≥n
      await this.saveConversation(message, aiResponse, conversationId);

      return {
        success: true,
        message: aiResponse,
      };

    } catch (error) {
      console.error('Hugging Face Error:', error);
      // Fallback al bot inteligente si falla
      return this.getSmartFallbackResponse(message, petContext);
    }
  }

  // Construir prompt con contexto de mascotas para Hugging Face
  private buildPetContextPrompt(message: string, petContext?: any): string {
    const petName = petContext?.name || 'tu mascota';
    const petType = petContext?.type || 'mascota';
    
    return `Contexto: Eres un asistente de mascotas llamado PetBot. Ayudas con ${petName}, que es un ${petType}. 
    
    Usuario: ${message}
    PetBot:`;
  }

  // Respuestas inteligentes gratuitas (Bot mejorado)
  private getSmartFallbackResponse(message: string, petContext?: any): AIResponse {
    const lowerMessage = message.toLowerCase();
    const petName = petContext?.name || 'tu mascota';
    const petType = petContext?.type || 'mascota';
    const petAge = petContext?.age || 'adulta';
    
    // Saludos personalizados
    if (lowerMessage.includes('hola') || lowerMessage.includes('hello')) {
      return {
        success: true,
        message: `¬°Hola! Soy PetBot, tu asistente de mascotas. üêï ¬øEn qu√© puedo ayudarte con ${petName} hoy?`
      };
    }
    
    // Alimentaci√≥n
    if (lowerMessage.includes('comida') || lowerMessage.includes('aliment') || lowerMessage.includes('dieta') || lowerMessage.includes('food') || lowerMessage.includes('nutrici√≥n')) {
      const specificAdvice = this.getFeedingAdvice(petType, petContext);
      return {
        success: true,
        message: `üçΩÔ∏è **Alimentaci√≥n para ${petName}:**\n\n${specificAdvice}\n\n¬øTienes alguna pregunta espec√≠fica sobre la alimentaci√≥n?`
      };
    }
    
    // Salud
    if (lowerMessage.includes('salud') || lowerMessage.includes('enfermo') || lowerMessage.includes('veterinario') || lowerMessage.includes('sick') || lowerMessage.includes('dolor') || lowerMessage.includes('s√≠ntoma')) {
      return {
        success: true,
        message: `üè• **Salud de ${petName}:**\n\nSi ${petName} muestra signos de enfermedad, contacta a un veterinario inmediatamente.\n\n**Signos de alerta:**\n‚Ä¢ Cambios en el apetito\n‚Ä¢ Cambios de comportamiento\n‚Ä¢ V√≥mitos o diarrea\n‚Ä¢ Letargia\n‚Ä¢ Tos o estornudos\n‚Ä¢ Cojera o dificultad para moverse\n‚Ä¢ Cambios en el pelaje\n\n¬øQu√© s√≠ntomas espec√≠ficos has notado?`
      };
    }
    
    // Ejercicio
    if (lowerMessage.includes('ejercicio') || lowerMessage.includes('paseo') || lowerMessage.includes('actividad') || lowerMessage.includes('walk') || lowerMessage.includes('jugar') || lowerMessage.includes('energ√≠a')) {
      const exerciseAdvice = this.getExerciseAdvice(petType);
      return {
        success: true,
        message: `üèÉ‚Äç‚ôÇÔ∏è **Ejercicio para ${petName}:**\n\n${exerciseAdvice}\n\n¬øQu√© tipo de actividad te gustar√≠a hacer con ${petName}?`
      };
    }
    
    // Vacunas
    if (lowerMessage.includes('vacuna') || lowerMessage.includes('vacun') || lowerMessage.includes('vaccine') || lowerMessage.includes('inmunizaci√≥n')) {
      const vaccineAdvice = this.getVaccineAdvice(petType);
      return {
        success: true,
        message: `üíâ **Vacunas para ${petName}:**\n\n${vaccineAdvice}\n\nConsulta con tu veterinario para un calendario personalizado.`
      };
    }
    
    // Comportamiento
    if (lowerMessage.includes('comportamiento') || lowerMessage.includes('conducta') || lowerMessage.includes('behavior') || lowerMessage.includes('agresivo') || lowerMessage.includes('miedoso') || lowerMessage.includes('ansioso')) {
      return {
        success: true,
        message: `üêæ **Comportamiento de ${petName}:**\n\nLos problemas de comportamiento pueden tener varias causas:\n\n‚Ä¢ Falta de ejercicio\n‚Ä¢ Ansiedad por separaci√≥n\n‚Ä¢ Cambios en el entorno\n‚Ä¢ Problemas m√©dicos\n‚Ä¢ Falta de socializaci√≥n\n‚Ä¢ Miedo o trauma\n\nTe recomiendo consultar con un veterinario o entrenador profesional.`
      };
    }
    
    // Cuidado del pelaje
    if (lowerMessage.includes('pelaje') || lowerMessage.includes('pelo') || lowerMessage.includes('cepillado') || lowerMessage.includes('ba√±o') || lowerMessage.includes('grooming')) {
      const groomingAdvice = this.getGroomingAdvice(petType);
      return {
        success: true,
        message: `ü™Æ **Cuidado del pelaje de ${petName}:**\n\n${groomingAdvice}\n\n¬øNecesitas consejos espec√≠ficos sobre el cuidado del pelaje?`
      };
    }
    
    // Socializaci√≥n
    if (lowerMessage.includes('socializar') || lowerMessage.includes('otros perros') || lowerMessage.includes('gatos') || lowerMessage.includes('personas') || lowerMessage.includes('miedoso')) {
      return {
        success: true,
        message: `ü§ù **Socializaci√≥n de ${petName}:**\n\nLa socializaci√≥n es fundamental para el bienestar de tu mascota:\n\n‚Ä¢ Exposici√≥n gradual a nuevas situaciones\n‚Ä¢ Interacci√≥n positiva con otros animales\n‚Ä¢ Contacto con diferentes personas\n‚Ä¢ Entrenamiento de obediencia b√°sica\n‚Ä¢ Recompensas por comportamiento positivo\n\n¬øEn qu√© aspecto espec√≠fico necesitas ayuda?`
      };
    }
    
    // Entrenamiento
    if (lowerMessage.includes('entrenar') || lowerMessage.includes('obediencia') || lowerMessage.includes('comandos') || lowerMessage.includes('adiestrar') || lowerMessage.includes('educar')) {
      return {
        success: true,
        message: `üéì **Entrenamiento de ${petName}:**\n\nEl entrenamiento b√°sico es esencial:\n\n‚Ä¢ Comandos b√°sicos: sentado, quieto, ven\n‚Ä¢ Uso de recompensas positivas\n‚Ä¢ Consistencia en las reglas\n‚Ä¢ Sesiones cortas y frecuentes\n‚Ä¢ Paciencia y refuerzo positivo\n\n¬øQu√© comando espec√≠fico quieres ense√±arle?`
      };
    }
    
    // Emergencias
    if (lowerMessage.includes('emergencia') || lowerMessage.includes('urgencia') || lowerMessage.includes('emergency') || lowerMessage.includes('accidente') || lowerMessage.includes('envenenado') || lowerMessage.includes('sangrado')) {
      return {
        success: true,
        message: `üö® **EMERGENCIA:**\n\nSi ${petName} est√° en peligro:\n\n1. **Mant√©n la calma**\n2. **Contacta a un veterinario inmediatamente**\n3. **No administres medicamentos sin consulta**\n4. **Lleva a ${petName} a una cl√≠nica de emergencias**\n5. **Si es envenenamiento, no induzcas el v√≥mito**\n\n¬øQu√© est√° pasando exactamente?`
      };
    }
    
    // Preguntas sobre edad
    if (lowerMessage.includes('edad') || lowerMessage.includes('a√±os') || lowerMessage.includes('viejo') || lowerMessage.includes('joven')) {
      const ageAdvice = this.getAgeAdvice(petType, petAge);
      return {
        success: true,
        message: `üìÖ **Edad de ${petName}:**\n\n${ageAdvice}\n\n¬øTienes preguntas espec√≠ficas sobre el cuidado seg√∫n la edad?`
      };
    }
    
    // Preguntas sobre peso
    if (lowerMessage.includes('peso') || lowerMessage.includes('obeso') || lowerMessage.includes('delgado') || lowerMessage.includes('gordo')) {
      return {
        success: true,
        message: `‚öñÔ∏è **Peso de ${petName}:**\n\nEl peso ideal depende de la raza y edad:\n\n‚Ä¢ Consulta con tu veterinario para el peso ideal\n‚Ä¢ Monitorea cambios bruscos de peso\n‚Ä¢ Ajusta la alimentaci√≥n seg√∫n la actividad\n‚Ä¢ El ejercicio regular ayuda a mantener un peso saludable\n\n¬øTe preocupa el peso de ${petName}?`
      };
    }
    
    // Respuesta general
    return {
      success: true,
      message: `¬°Gracias por tu mensaje! üêæ Soy PetBot, tu asistente de mascotas.\n\nPuedo ayudarte con ${petName} en:\n\n‚Ä¢ üçΩÔ∏è Alimentaci√≥n y nutrici√≥n\n‚Ä¢ üè• Salud y vacunas\n‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è Ejercicio y actividad\n‚Ä¢ üêæ Comportamiento y entrenamiento\n‚Ä¢ ü™Æ Cuidado del pelaje\n‚Ä¢ ü§ù Socializaci√≥n\n‚Ä¢ üìÖ Cuidado por edad\n‚Ä¢ ‚öñÔ∏è Control de peso\n‚Ä¢ üö® Emergencias\n\nPara casos espec√≠ficos, siempre consulta con un veterinario profesional. ¬øEn qu√© tema te gustar√≠a que te ayude?`
    };
  }

  // Consejos espec√≠ficos de alimentaci√≥n
  private getFeedingAdvice(petType: string, context?: any): string {
    if (petType === 'dog' || petType === 'perro') {
      return `**Para perros:**\n‚Ä¢ 2-3 comidas al d√≠a\n‚Ä¢ Comida de calidad apropiada para su edad\n‚Ä¢ Agua fresca siempre disponible\n‚Ä¢ Evita comida humana\n‚Ä¢ Horarios regulares\n‚Ä¢ Control de porciones seg√∫n actividad`;
    } else if (petType === 'cat' || petType === 'gato') {
      return `**Para gatos:**\n‚Ä¢ Comida h√∫meda y seca\n‚Ä¢ Agua fresca en varios lugares\n‚Ä¢ Comida espec√≠fica para gatos\n‚Ä¢ Horarios regulares\n‚Ä¢ Control de porciones\n‚Ä¢ Algunos gatos prefieren comer varias veces al d√≠a`;
    } else {
      return `‚Ä¢ Consultar con un veterinario para una dieta personalizada\n‚Ä¢ Proporcionar comida de calidad apropiada para su edad\n‚Ä¢ Agua fresca siempre disponible\n‚Ä¢ Horarios regulares de alimentaci√≥n\n‚Ä¢ Control de porciones`;
    }
  }

  // Consejos espec√≠ficos de ejercicio
  private getExerciseAdvice(petType: string): string {
    if (petType === 'dog' || petType === 'perro') {
      return `**Para perros:**\n‚Ä¢ Paseos diarios (2-3 veces al d√≠a)\n‚Ä¢ Juegos activos (pelota, frisbee)\n‚Ä¢ Socializaci√≥n con otros perros\n‚Ä¢ Entrenamiento mental\n‚Ä¢ Diferentes rutas de paseo\n‚Ä¢ Ajusta la intensidad seg√∫n la raza`;
    } else if (petType === 'cat' || petType === 'gato') {
      return `**Para gatos:**\n‚Ä¢ Juegos de caza (juguetes con plumas)\n‚Ä¢ Rascadores y √°rboles para gatos\n‚Ä¢ Estimulaci√≥n mental (puzzles)\n‚Ä¢ Tiempo de juego activo\n‚Ä¢ Acceso a ventanas para observar\n‚Ä¢ Juegos que simulen la caza`;
    } else {
      return `‚Ä¢ El ejercicio es fundamental para la salud\n‚Ä¢ Ajusta la actividad seg√∫n la edad y raza\n‚Ä¢ Incluye estimulaci√≥n mental\n‚Ä¢ Mant√©n horarios regulares\n‚Ä¢ Var√≠a las actividades para evitar aburrimiento`;
    }
  }

  // Consejos espec√≠ficos de vacunas
  private getVaccineAdvice(petType: string): string {
    if (petType === 'dog' || petType === 'perro') {
      return `**Vacunas b√°sicas para perros:**\n‚Ä¢ Parvovirus\n‚Ä¢ Distemper\n‚Ä¢ Rabia\n‚Ä¢ Adenovirus\n‚Ä¢ Parainfluenza\n\n**Vacunas opcionales:**\n‚Ä¢ Bordetella (tos de las perreras)\n‚Ä¢ Lyme\n\nConsulta con tu veterinario para un calendario personalizado.`;
    } else if (petType === 'cat' || petType === 'gato') {
      return `**Vacunas b√°sicas para gatos:**\n‚Ä¢ Panleucopenia\n‚Ä¢ Calicivirus\n‚Ä¢ Rabia\n‚Ä¢ Leucemia felina\n‚Ä¢ Rinotraqueitis\n\n**Vacunas opcionales:**\n‚Ä¢ PIF (Peritonitis Infecciosa Felina)\n\nConsulta con tu veterinario para un calendario personalizado.`;
    } else {
      return `Las vacunas son esenciales para la salud de tu mascota. Consulta con tu veterinario para un calendario personalizado seg√∫n el tipo y edad de tu mascota.`;
    }
  }

  // Consejos de cuidado del pelaje
  private getGroomingAdvice(petType: string): string {
    if (petType === 'dog' || petType === 'perro') {
      return `**Para perros:**\n‚Ä¢ Cepillado regular seg√∫n el tipo de pelo\n‚Ä¢ Ba√±os cada 4-6 semanas\n‚Ä¢ Corte de u√±as mensual\n‚Ä¢ Limpieza de o√≠dos semanal\n‚Ä¢ Revisi√≥n dental regular\n‚Ä¢ Corte de pelo seg√∫n la raza`;
    } else if (petType === 'cat' || petType === 'gato') {
      return `**Para gatos:**\n‚Ä¢ Cepillado diario para gatos de pelo largo\n‚Ä¢ Cepillado semanal para pelo corto\n‚Ä¢ Ba√±os solo cuando sea necesario\n‚Ä¢ Corte de u√±as cada 2-3 semanas\n‚Ä¢ Limpieza de o√≠dos si es necesario\n‚Ä¢ Los gatos se limpian solos, pero necesitan ayuda`;
    } else {
      return `‚Ä¢ El cuidado del pelaje var√≠a seg√∫n el tipo de mascota\n‚Ä¢ Consulta con un veterinario o groomer profesional\n‚Ä¢ Mant√©n una rutina regular de cuidado\n‚Ä¢ Revisa regularmente la piel en busca de problemas`;
    }
  }

  // Consejos por edad
  private getAgeAdvice(petType: string, age: string): string {
    if (age === 'cachorro' || age === 'gatito' || age === 'joven') {
      return `**Para mascotas j√≥venes:**\n‚Ä¢ Necesitan m√°s comida y energ√≠a\n‚Ä¢ Requieren m√°s ejercicio y socializaci√≥n\n‚Ä¢ Vacunas y desparasitaci√≥n frecuentes\n‚Ä¢ Entrenamiento b√°sico temprano\n‚Ä¢ Supervisi√≥n constante\n‚Ä¢ Juegos y estimulaci√≥n mental`;
    } else if (age === 'adulta') {
      return `**Para mascotas adultas:**\n‚Ä¢ Mant√©n rutinas regulares\n‚Ä¢ Ejercicio moderado y consistente\n‚Ä¢ Revisi√≥n veterinaria anual\n‚Ä¢ Vacunas de refuerzo\n‚Ä¢ Cuidado dental regular\n‚Ä¢ Monitoreo de cambios de comportamiento`;
    } else if (age === 'senior' || age === 'mayor') {
      return `**Para mascotas senior:**\n‚Ä¢ Visitas veterinarias m√°s frecuentes\n‚Ä¢ Dieta especial para edad avanzada\n‚Ä¢ Ejercicio suave y adaptado\n‚Ä¢ Atenci√≥n a cambios de comportamiento\n‚Ä¢ Cuidado dental especial\n‚Ä¢ Comodidad y accesibilidad en el hogar`;
    } else {
      return `El cuidado var√≠a seg√∫n la edad de tu mascota. Consulta con tu veterinario para recomendaciones espec√≠ficas seg√∫n la etapa de vida.`;
    }
  }

  // M√©todo para OpenAI (modo pagado)
  private async sendToOpenAI(
    message: string, 
    conversationId?: string, 
    petContext?: any
  ): Promise<AIResponse> {
    const maxRetries = 3;
    let lastError: Error | null = null;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        // 1. Preparar el contexto del sistema
        const systemPrompt = this.buildSystemPrompt(petContext);
        
        // 2. Obtener historial de conversaci√≥n
        const conversationHistory = conversationId 
          ? await this.getConversationHistory(conversationId)
          : [];

        // 3. Construir el payload para OpenAI
        const messages = [
          { role: 'system', content: systemPrompt },
          ...conversationHistory.map(msg => ({
            role: msg.role,
            content: msg.content
          })),
          { role: 'user', content: message }
        ];

        // 4. Llamar a la API de OpenAI
        const response = await fetch(`${this.baseURL}/chat/completions`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'gpt-3.5-turbo',
            messages: messages,
            max_tokens: 300,
            temperature: 0.7,
          }),
        });

        if (response.status === 429) {
          const waitTime = Math.pow(2, attempt) * 1000;
          console.log(`Rate limited, waiting ${waitTime}ms before retry ${attempt}`);
          await new Promise(resolve => setTimeout(resolve, waitTime));
          continue;
        }

        if (!response.ok) {
          throw new Error(`OpenAI API error: ${response.status} - ${response.statusText}`);
        }

        const data = await response.json();
        const aiResponse = data.choices[0].message.content;

        // 5. Guardar la conversaci√≥n en la base de datos
        await this.saveConversation(message, aiResponse, conversationId);

        return {
          success: true,
          message: aiResponse,
        };

      } catch (error) {
        lastError = error instanceof Error ? error : new Error('Unknown error');
        console.error(`AI Service Error (attempt ${attempt}):`, error);
        
        if (attempt === maxRetries) {
          break;
        }
        
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      }
    }

    return {
      success: false,
      error: lastError?.message || 'Failed after multiple attempts',
    };
  }

  // Construir el prompt del sistema con contexto de mascotas
  private buildSystemPrompt(petContext?: any): string {
    let prompt = `Eres un asistente de IA especializado en mascotas llamado "PetBot". 
    Tu objetivo es ayudar a los due√±os de mascotas con consejos, informaci√≥n y apoyo.
    
    Reglas importantes:
    - Siempre s√© amigable y emp√°tico
    - Proporciona consejos √∫tiles pero no reemplaces la consulta veterinaria
    - Si hay una emergencia m√©dica, recomienda contactar a un veterinario inmediatamente
    - Usa un tono c√°lido y comprensivo
    - Responde en espa√±ol
    `;

    if (petContext) {
      prompt += `
      
      Contexto de la mascota:
      - Nombre: ${petContext.name || 'No especificado'}
      - Tipo: ${petContext.type || 'No especificado'}
      - Edad: ${petContext.age || 'No especificado'}
      - Raza: ${petContext.breed || 'No especificado'}
      
      Usa esta informaci√≥n para personalizar tus respuestas cuando sea relevante.
      `;
    }

    return prompt;
  }

  // Obtener historial de conversaci√≥n desde Supabase
  private async getConversationHistory(conversationId: string): Promise<any[]> {
    try {
      const { data, error } = await supabase
        .from('ai_conversations')
        .select('messages')
        .eq('id', conversationId)
        .single();

      if (error) throw error;
      return data?.messages || [];
    } catch (error) {
      console.error('Error getting conversation history:', error);
      return [];
    }
  }

  // Guardar conversaci√≥n en Supabase
  private async saveConversation(
    userMessage: string, 
    aiResponse: string, 
    conversationId?: string
  ): Promise<void> {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');

      const newMessages = [
        {
          id: Date.now().toString(),
          role: 'user',
          content: userMessage,
          timestamp: new Date().toISOString(),
        },
        {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: aiResponse,
          timestamp: new Date().toISOString(),
        },
      ];

      if (conversationId) {
        const { data: existingConversation } = await supabase
          .from('ai_conversations')
          .select('messages')
          .eq('id', conversationId)
          .single();

        const updatedMessages = [
          ...(existingConversation?.messages || []),
          ...newMessages,
        ];

        await supabase
          .from('ai_conversations')
          .update({
            messages: updatedMessages,
            updated_at: new Date().toISOString(),
          })
          .eq('id', conversationId);
      } else {
        await supabase
          .from('ai_conversations')
          .insert({
            user_id: user.id,
            messages: newMessages,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          });
      }
    } catch (error) {
      console.error('Error saving conversation:', error);
    }
  }

  // Obtener conversaciones del usuario
  async getUserConversations(): Promise<AIConversation[]> {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');

      const { data, error } = await supabase
        .from('ai_conversations')
        .select('*')
        .eq('user_id', user.id)
        .order('updated_at', { ascending: false });

      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('Error getting user conversations:', error);
      return [];
    }
  }

  // Obtener una conversaci√≥n espec√≠fica
  async getConversation(conversationId: string): Promise<AIConversation | null> {
    try {
      const { data, error } = await supabase
        .from('ai_conversations')
        .select('*')
        .eq('id', conversationId)
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error getting conversation:', error);
      return null;
    }
  }
}

export const aiService = new AIService();
